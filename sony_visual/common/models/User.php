<?php

namespace common\models;

use http\Url;
use Yii;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\Html;
use yii\web\IdentityInterface;

/**
 * User model
 *
 * @property integer $id
 * @property string $first_name
 * @property string $last_name
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $verification_token
 * @property string $email
 * @property string $cell_phone
 * @property string $auth_key
 * @property string $full_name
 * @property integer $status
 * @property integer $created_at
 * @property integer $user_type
 * @property integer $updated_at
 * @property integer $updated_by
 * @property string $password write-only password
 */
class User extends ActiveRecord implements IdentityInterface
{

    const APP_USERNAME = 'JUST_SKATE';
    const APP_PASSWORD = 'Vob6ZBy6nOLj6YhG';
    const STATUS_DELETED = 0;
    const STATUS_INACTIVE = 9;
    const STATUS_ACTIVE = 10;
    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';

    public $full_name;
    public $password;

    public static $admin = 'Admin';
    public static $superAdmin = 'Super Admin';
    public static $customer = 'Customer';


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{sac_user}}';
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['first_name','last_name','email', 'auth_key', 'password_hash', 'updated_at','updated_by'], 'required'],
            [[ 'updated_by'], 'default', 'value' => 1],
            [['password'], 'required', 'on' => 'register'],
            [['status'], 'integer'],
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_INACTIVE, self::STATUS_DELETED]],
            [['user_type'], 'exist', 'skipOnError' => true, 'targetClass' => UserType::class, 'targetAttribute' => ['user_type' => 'id']],
            ['user_type', 'default', 'value' => UserType::getCustomerId()],
            [['cell_phone', 'password_hash', 'password_reset_token', 'email', 'verification_token'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['email'], 'trim'],
             [['email'], 'unique'],
//             [['cell_phone'], 'unique'],
            [['password_reset_token'], 'unique'],
//            [['cell_phone'], 'unique'],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'cell_phone' => 'Cell Phone',
            'auth_key' => 'Auth Key',
            'password_hash' => 'Password Hash',
            'password_reset_token' => 'Password Reset Token',
            'email' => 'Email',
            'status' => 'Status',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'updated_by' => 'Created or Last Updated By',
            'verification_token' => 'Verification Token',
        ];
    }

    public function beforeSave($insert)
    {
        if(empty($this->cell_phone)){
            $this->cell_phone = "12345";
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by cell_phone
     *
     * @param string $cell_phone_email
     * @param bool $company_user
     * @return array|User|ActiveRecord|null
     */
    public static function findByCellPhoneOrEmail($cell_phone_email, $company_user = false)
    {
        if($company_user){
            return static::findCompanyUser($cell_phone_email);
        }
//        return static::findOne(['cell_phone' => $cell_phone_email, 'status' => self::STATUS_ACTIVE]);
        return static::find()->where(" (cell_phone='$cell_phone_email' or email='$cell_phone_email') and status=".self::STATUS_ACTIVE)->one();
    }

    public static function findCompanyUser($cell_phone, $checkAll = false)
    {
        $type = [self::$customer, self::$admin];
        if($checkAll){
            $type[] = self::$superAdmin;
        }
        return static::find()
            ->innerJoinWith(['userTypeRelation'])
            ->where(" cell_phone='$cell_phone' or email='$cell_phone' and status=".self::STATUS_ACTIVE)
            ->andWhere(['in','user_type.name',$type])
            ->one();

    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds user by verification email token
     *
     * @param string $token verify email token
     * @return static|null
     */
    public static function findByVerificationToken($token) {
        return static::findOne([
            'verification_token' => $token,
            'status' => self::STATUS_INACTIVE
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Generates new token for email verification
     */
    public function generateEmailVerificationToken()
    {
        $this->verification_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    /**
     * Gets query for [[Posts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Posts::className(), ['author_id' => 'id']);
    }

    public function getFormattedDate($only_date = false){
        if($only_date)
            return date('d-M-Y', $this->created_at);
        return date('d-M-Y, h:i A', $this->created_at);
    }

    public function getFormattedUpdatedDate(){
        return date('d-M-Y, h:i A', $this->updated_at);
    }

    public function getName(){
        return $this->full_name = $this->first_name .' '.$this->last_name;
    }

    public function getFirstName(){
        return $this->first_name;
    }

    public function getLastName(){
        return $this->last_name;
    }
    
    public function getStatus(){
        if($this->status === self::STATUS_ACTIVE){
            return "Active";
        } else if($this->status === self::STATUS_INACTIVE){
            return "In-Active";
        } else {
            return "Deleted";
        }
    }

    public function getStatusArray()
    {
        return [
            self::STATUS_ACTIVE => 'Active',
            self::STATUS_INACTIVE => 'In-Active',
//            self::STATUS_DELETED => 'Deleted',
        ];
    }

    public static function getUserArray($show_company_users = false, $show_default_value = false, $arr_response = true){

        $query = self::find()
        ->where(['status' => self::STATUS_ACTIVE]);

        if($show_company_users){
            $query->innerJoinWith(['userTypeRelation'])
                ->andWhere(['in','user_type.name',[self::$customer, self::$admin]]);
        }

        $users = $query->all();

        if(!$arr_response)
            return $users;

        $arr = [];
        foreach ($users as $user){
            $arr[$user->id] = $user->getName();
        }
        if($show_default_value){
            $arr[0] = 'Select User';
        }

        return $arr;
    }

    public function generateHiddenAttributes(){
        $this->password = $this->isCustomer() ? "dummy_password" : $this->password;
        $this->setPassword($this->password);
        $this->generateAuthKey();
        $this->generateEmailVerificationToken();
    }

    protected function sendEmail($user)
    {
        return true;
//        return Yii::$app
//            ->mailer
//            ->compose(
//                ['html' => 'emailVerify-html', 'text' => 'emailVerify-text'],
//                ['user' => $user]
//            )
//            ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->name . ' robot'])
//            ->setTo($this->email)
//            ->setSubject('Account registration at ' . Yii::$app->name)
//            ->send();
    }

    public function getLastUpdatedBy(){
        $user = User::findOne(['id' => $this->updated_by]);
        return $user ? $user->getName() : null;
    }

    public function getUserType(){
        return UserType::findOne(['id' => $this->user_type]);
    }

    public function getUserTypeName(){
        $object = $this->getUserType();
        return $object ? $object->getName() : null;
    }

    public function getUserTypeRelation(){
        return $this->hasOne(UserType::class, ['id' => 'user_type']);
    }

    public static function isSameObject($object_1,$object_2) {

        if(!is_object($object_1) || !is_object($object_2))
            return false;

        // does the objects have the same type?

        if(get_class($object_1) !== get_class($object_2))
            return false;

        foreach($object_1->attributes as $key => $value) {
            if($object_1->$key != $object_2->$key){
                return false;
            }
        }

        return true;
    }

    public function getCurrentUrl(){
        return \yii\helpers\Url::to('/user/view/?id=' . $this->getId());
    }

    /**
     * Rights of CRUD operations
     */
    public function getGridRights($user_screen = false){
        if(strtolower($this->getUserTypeName()) == strtolower(self::$admin)){
            return '{view}';
        } else if(strtolower($this->getUserTypeName()) == strtolower(self::$superAdmin)){
            return '{view} &nbsp; {update} &nbsp; {delete}';
            if(Yii::$app->user->identity->isMasterUser()){
                return '{view} &nbsp; {update} &nbsp; {delete}';
            } else {
                if($user_screen){
                    return '{view}';
                }
                return '{view} &nbsp; {update}';
            }
//            if($booking_screen){
//                return '{view} &nbsp; {update}';
//            }
//            return '{view} &nbsp; {update} &nbsp; {delete}';
        } else {
            return '';
        }
    }

    public function isEmployee(){
        return UserType::isEmployee($this->user_type);
    }

    public function isSuperAdmin(){
        return UserType::isSuperAdmin($this->user_type);
    }

    public function isCustomer(){
        return UserType::isCustomer($this->user_type);
    }

    public function getCustomer(){
        if($this->isCustomer()){
            return Customer::find()->where(['user_id' => $this->id])->one();
        }
        return null;
    }

    public function getCustomerCNIC(){
        $customer = $this->getCustomer();
        if($customer)
            return $customer->cnic;
        return "not-available";
    }

    public function getCustomerAddress(){
        $customer = $this->getCustomer();
        if($customer)
            return $customer->address;
        return "not-available";
    }

    public function getUrl(){
        return Html::a($this->getName(), [\yii\helpers\Url::to('/user/view?id='.$this->id)],['target' => "_blank"]);
    }

    public function isMasterUser(){
        return $this->cell_phone == '07852194092' || $this->cell_phone == '03001234567';
    }

    public function getVideos(){
        $videos = VideoPost::findAll(['user_id' => $this->id]);
        return $videos ?? [];
    }

    public function getFavoriteVideos(){
        $videos = VideoFavorite::findAll(['user_id' => $this->id]);
        return $videos ?? [];
    }

    public function toMap(){
        return [
            'id' => $this->id,
            'first_name' => $this->first_name,
            'last_name' => $this->last_name,
            'email' => $this->email,
        ];
    }

    public static function getReport($month){
        $start_created = strtotime(date('Y-m-01 00:00:00', (int)$month));
        $end_created = strtotime(date('Y-m-t 23:59:59', (int)$month));

        $query = User::find()
            ->where([
                '>=',
                'created_at', $start_created
            ])
            ->andWhere([
                '<=',
                'created_at',
                $end_created,
            ]);

        $count = $query->count();



        return isset($count) ? $count : 0;
    }


    public static function getReportByDate($startTime, $endTime){
        $start_created = strtotime($startTime);
        $end_created = strtotime($endTime);

        $query = User::find();

        if(!empty($startTime)) {
            $query->where([
                '>=',
                'created_at', $start_created
            ]);
        }
        if(!empty($endTime)) {
            $query->andWhere([
                '<=',
                'created_at',
                $end_created,
            ]);
        }

        $count = $query->count();

        return isset($count) ? $count : 0;
    }
}
